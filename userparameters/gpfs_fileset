#!/usr/bin/python

import argparse
import json
import subprocess
import os
import sys

__author__ = 'Vladimir Krumshtein <vladimir.krumstein@clustervision.com>'
__date__ = 'Dec 2016'
__version__ = '1.0.0'

try:
	from subprocess import DEVNULL # py3k
except ImportError:
	import os
	DEVNULL = open(os.devnull, 'wb')


class GPFS_FILESET(object):

    EXECUTABLE = '/usr/lpp/mmfs/bin/mmlsquota'

    if not os.path.exists(EXECUTABLE):
        print "No executable found '%s'. Looks like, no GPFS here" % EXECUTABLE
        sys.exit(1)

    @classmethod
    def discovery_filesets(cls, args):
        data = []
        filesets = []
        cls.EXECUTABLE = '/usr/lpp/mmfs/bin/mmlsquota'
        proc = subprocess.Popen([cls.EXECUTABLE], stderr=DEVNULL, stdout=subprocess.PIPE, close_fds=True) 
        for line in proc.communicate()[0].split('\n')[2:]:
            tmp_arr = [s.strip() for s in line.split(' ') if s.strip()]
            try:
                fileset = {'{#FILESET}':tmp_arr[0]+"/"+ tmp_arr[1]}
                data.append(fileset)
            except:
                pass
        return json.dumps({'data': data}, separators=(',', ':'))

    @classmethod
    def getsize(cls, args, parm):
        (filesystem,fileset_name) = (args.fileset.split("/")[0],args.fileset.split("/")[1])
        SIZE = {}
        cls.EXECUTABLE = '/usr/lpp/mmfs/bin/mmlsquota'
        proc = subprocess.Popen([cls.EXECUTABLE,"-j", fileset_name, filesystem  ], stderr=DEVNULL, stdout=subprocess.PIPE, close_fds=True)
        if proc.returncode:
            sys.exit(1)
        for line in proc.communicate()[0].split('\n')[2:]:
            tmp_arr = [s.strip() for s in line.split(' ') if s.strip()]
            try:
                return int(tmp_arr[parm])
            except:
                cls.EXECUTABLE = '/bin/df'
                proc = subprocess.Popen([cls.EXECUTABLE, '/' + filesystem], stderr=DEVNULL, stdout=subprocess.PIPE, close_fds=True) 
                for line in proc.communicate()[0].split('\n')[1:]:
                    tmp_arr = [s.strip() for s in line.split(' ') if s.strip()]
                    try:
                        SIZE = {4: tmp_arr[1],2:tmp_arr[2]}
                    except:
                        pass
    
                return SIZE[parm] 

    @classmethod
    def get_total(cls, args):
        return int(cls.getsize(args,4))

    @classmethod
    def get_used(cls, args):
        return int(cls.getsize(args,2))

    @classmethod
    def get_free(cls, args):
        return cls.get_total(args) - cls.get_used(args)

    @classmethod
    def get_inodes(cls, args, parm):
        cache = open("/tmp/gpfs_filset_usage",'r')
        (filesystem,fileset_name) = (args.fileset.split("/")[0],args.fileset.split("/")[1])
        inode_space = {}
        for line in cache.readlines()[3:]:
            tmp_arr = [s.strip() for s in line.split(' ') if s.strip()]
            try:
                if int(tmp_arr[4]) > 0:
                    inode_space[tmp_arr[3]] = tmp_arr 
                if tmp_arr[0] == fileset_name:
                    if parm == 6:
                        return tmp_arr[6]
                    else:     
                        return inode_space[tmp_arr[3]][parm]
            except:
                pass

    @classmethod
    def get_itotal(cls, args):
        return int(cls.get_inodes(args,4))

    @classmethod
    def get_iused(cls, args):
        return int(cls.get_inodes(args,6))
    
    @classmethod
    def get_ifree(cls, args):
        return cls.get_itotal(args) - cls.get_iused( args)

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true')

    subparsers = parser.add_subparsers()

    subparser_discovery = subparsers.add_parser('discovery')
    subparser_discovery.set_defaults(func=GPFS_FILESET.discovery_filesets)

    subparser_powerstate = subparsers.add_parser('fileset_total')
    subparser_powerstate.set_defaults(func=GPFS_FILESET.get_total)
    subparser_powerstate.add_argument('fileset')

    subparser_powerstate = subparsers.add_parser('fileset_used')
    subparser_powerstate.set_defaults(func=GPFS_FILESET.get_used)
    subparser_powerstate.add_argument('fileset')

    subparser_powerstate = subparsers.add_parser('fileset_free')
    subparser_powerstate.set_defaults(func=GPFS_FILESET.get_free)
    subparser_powerstate.add_argument('fileset')


    subparser_powerstate = subparsers.add_parser('fileset_itotal')
    subparser_powerstate.set_defaults(func=GPFS_FILESET.get_itotal)
    subparser_powerstate.add_argument('fileset')

    subparser_powerstate = subparsers.add_parser('fileset_iused')
    subparser_powerstate.set_defaults(func=GPFS_FILESET.get_iused)
    subparser_powerstate.add_argument('fileset')

    subparser_powerstate = subparsers.add_parser('fileset_ifree')
    subparser_powerstate.set_defaults(func=GPFS_FILESET.get_ifree)
    subparser_powerstate.add_argument('fileset')

    return parser.parse_known_args()[0]

def main():
    args = parse_args()
    try:
        print(args.func(args)) 
    except Exception as e:
        if args.debug:
            raise e
        print(e)


if __name__ == '__main__':
    main()
